parameters:
- name: arch
  type: string
  values:
  - amd64
  - armhf
  - arm64
  default: amd64

- name: pool
  type: string
  values:
  - sonicbld
  - default
  default: default

- name: timeout
  type: number
  default: 60

- name: sonic_slave
  type: string

- name: artifact_name
  type: string

- name: swss_common_artifact_name
  type: string

jobs:
- job:
  displayName: ${{ parameters.arch }}
  timeoutInMinutes: ${{ parameters.timeout }}

  pool:
    ${{ if ne(parameters.pool, 'default') }}:
      name: ${{ parameters.pool }}
    ${{ if eq(parameters.pool, 'default') }}:
      vmImage: 'ubuntu-20.04'

  container:
    image: sonicdev-microsoft.azurecr.io:443/${{ parameters.sonic_slave }}:latest

  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: 9
      artifact: ${{ parameters.swss_common_artifact_name }}
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/master'
    displayName: "Download sonic swss common deb packages"

  - script: |
      set -ex
      pwd
      ls -l ../

      #install HIREDIS
      sudo apt-get install -y libhiredis0.14 libhiredis-dev

      # Install libnl3
      sudo apt-get -y purge libnl-3-dev libnl-route-3-dev libnl-nf-3-dev
      sudo dpkg -i ../target/debs/bookworm/libnl-3-200_*.deb
      sudo dpkg -i ../target/debs/bookworm/libnl-genl-3-200_*.deb
      sudo dpkg -i ../target/debs/bookworm/libnl-route-3-200_*.deb
      sudo dpkg -i ../target/debs/bookworm/libnl-nf-3-200_*.deb
      sudo apt-get install -qq -y \
          libnl-3-dev \
          libnl-genl-3-dev \
          libnl-route-3-dev \
          libnl-nf-3-dev

      #install libswsscommon
      sudo dpkg -i ../libswsscommon_1.0.0_${{ parameters.arch }}.deb
      sudo dpkg -i ../libswsscommon-dev_1.0.0_${{ parameters.arch }}.deb
    displayName: "Install dependency"

  - checkout: self
    clean: true
    submodules: recursive
    displayName: 'Checkout code'

  - script: |

      ./autogen.sh

      dpkg-buildpackage -rfakeroot -us -uc -b -j$(nproc) && cp ../*.deb $(Build.ArtifactStagingDirectory)/
    displayName: "Build"

  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: ${{ parameters.artifact_name }}
    displayName: "Archive artifacts"
